// THIS FILE IS AUTO GENERATED BY GK-CLI DO NOT EDIT!!
package endpoint

import (
	endpoint "github.com/go-kit/kit/endpoint"
	service "github.com/money-hub/MoneyDodo.service/comment/pkg/service"
)

// Endpoints collects all of the endpoints that compose a profile service. It's
// meant to be used as a helper struct, to collect all of the endpoints into a
// single parameter.
type Endpoints struct {
	GetCommentEndpoint        endpoint.Endpoint
	PostCommentEndpoint       endpoint.Endpoint
	ChangeCommentEndpoint     endpoint.Endpoint
	DeleteCommentEndpoint     endpoint.Endpoint
	LikeCommentEndpoint       endpoint.Endpoint
	CancelLikeCommentEndpoint endpoint.Endpoint
}

// New returns a Endpoints struct that wraps the provided service, and wires in all of the
// expected endpoint middlewares
func New(s service.CommentService, mdw map[string][]endpoint.Middleware) Endpoints {
	eps := Endpoints{
		CancelLikeCommentEndpoint: MakeCancelLikeCommentEndpoint(s),
		ChangeCommentEndpoint:     MakeChangeCommentEndpoint(s),
		DeleteCommentEndpoint:     MakeDeleteCommentEndpoint(s),
		GetCommentEndpoint:        MakeGetCommentEndpoint(s),
		LikeCommentEndpoint:       MakeLikeCommentEndpoint(s),
		PostCommentEndpoint:       MakePostCommentEndpoint(s),
	}
	for _, m := range mdw["GetComment"] {
		eps.GetCommentEndpoint = m(eps.GetCommentEndpoint)
	}
	for _, m := range mdw["PostComment"] {
		eps.PostCommentEndpoint = m(eps.PostCommentEndpoint)
	}
	for _, m := range mdw["ChangeComment"] {
		eps.ChangeCommentEndpoint = m(eps.ChangeCommentEndpoint)
	}
	for _, m := range mdw["DeleteComment"] {
		eps.DeleteCommentEndpoint = m(eps.DeleteCommentEndpoint)
	}
	for _, m := range mdw["LikeComment"] {
		eps.LikeCommentEndpoint = m(eps.LikeCommentEndpoint)
	}
	for _, m := range mdw["CancelLikeComment"] {
		eps.CancelLikeCommentEndpoint = m(eps.CancelLikeCommentEndpoint)
	}
	return eps
}
