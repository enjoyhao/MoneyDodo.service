{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This documentation describes example APIs found under https://github.com/money-hub/MoneyDodo.service",
    "title": "money-hub MoneyDodo/cpt",
    "license": {
      "name": "MIT",
      "url": "http://opensource.org/licenses/MIT"
    },
    "version": "1.0.0"
  },
  "paths": {
    "/api/tasks": {
      "get": {
        "description": "Get all task without detail.",
        "tags": [
          "cpt"
        ],
        "summary": "Get all tasks.",
        "operationId": "swaggGetAllReq",
        "parameters": [
          {
            "type": "int",
            "description": "page indicates the number of pages you want to get from server.",
            "name": "page",
            "in": "query"
          },
          {
            "type": "int",
            "description": "offset indicates the number of targets you want to skip.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "int",
            "description": "limit indicates the number of targets in one page you want to get from server.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "int",
            "description": "orderby indicates the order of targets you want to get from server.",
            "name": "orderby",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/swaggTasksResp"
          },
          "400": {
            "$ref": "#/responses/swaggBadReq"
          }
        }
      },
      "post": {
        "description": "Create a task(Now only support questionnaire). The upload parameter needs to be a wrapper of model.Qtnr and has one extra field called \"kind\" which indicates the task type.",
        "tags": [
          "cpt"
        ],
        "summary": "Create a task.",
        "operationId": "swaggPostReq",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Qtnr"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/swaggTaskResp"
          },
          "400": {
            "$ref": "#/responses/swaggBadReq"
          }
        }
      }
    },
    "/api/tasks/{taskId}": {
      "get": {
        "description": "Get the specical task with detail(Now only support questionnaire). You need to specify and taskId.",
        "tags": [
          "cpt"
        ],
        "summary": "Get the specical task of the user (with id=userId).",
        "operationId": "swaggGetSpecReq",
        "parameters": [
          {
            "type": "string",
            "description": "id of task",
            "name": "taskId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/swaggTaskResp"
          },
          "400": {
            "$ref": "#/responses/swaggBadReq"
          }
        }
      },
      "put": {
        "description": "Update the task information(Now only support questionnaire). Also, you need to specify the taskId. The upload parameter needs to be a wrapper of model.Qtnr and has one extra field called \"kind\" which indicates the task type.",
        "tags": [
          "cpt"
        ],
        "summary": "Update the task information",
        "operationId": "swaggPutReq",
        "parameters": [
          {
            "type": "string",
            "description": "id of task",
            "name": "taskId",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Qtnr"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/swaggTaskResp"
          },
          "400": {
            "$ref": "#/responses/swaggBadReq"
          }
        }
      }
    },
    "/api/tasks/{taskId}?state={state}": {
      "delete": {
        "description": "When state is equal to \"non-released\" or \"closed\", it means the creator want to delete it. When state is equal to \"released\", it means the creator want to cancel to release it. Also, you need to specify the taskId.",
        "tags": [
          "cpt"
        ],
        "summary": "Delete\\Cancel a task.",
        "operationId": "swaggDeleteReq",
        "parameters": [
          {
            "description": "id of task",
            "name": "taskId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "state can be one of \"non-released\", \"released\" and \"closed\"",
            "name": "state",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/swaggNoReturnValue"
          },
          "400": {
            "$ref": "#/responses/swaggBadReq"
          }
        }
      }
    }
  },
  "definitions": {
    "Qtnr": {
      "type": "object",
      "properties": {
        "cutoff": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Cutoff"
        },
        "id": {
          "type": "string",
          "x-go-name": "Id"
        },
        "kind": {
          "type": "string",
          "x-go-name": "Kind"
        },
        "pubdate": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Pubdate"
        },
        "publisher": {
          "type": "string",
          "x-go-name": "Publisher"
        },
        "qtnr": {
          "$ref": "#/definitions/Questionnaire"
        },
        "restrain": {
          "description": "Recipient       string    `json:\"recipient\"`",
          "type": "string",
          "x-go-name": "Restrain"
        },
        "reward": {
          "description": "Enddate         time.Time `json:\"enddate\"`",
          "type": "number",
          "format": "double",
          "x-go-name": "Reward"
        },
        "state": {
          "description": "RecipientFinish bool      `json:\"recipientFinish\" xorm:\"recipientFinish\"`\nConfirmFinish   bool      `json:\"confirmFinish\" xorm:\"confirmFinish\"`",
          "type": "string",
          "x-go-name": "State"
        }
      },
      "x-go-package": "github.com/money-hub/MoneyDodo.service/model"
    },
    "Questionnaire": {
      "type": "object",
      "properties": {
        "query": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/query"
          },
          "x-go-name": "Query"
        },
        "singleChoice": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/singleChoice"
          },
          "x-go-name": "SingleChoice"
        },
        "taskId": {
          "type": "string",
          "x-go-name": "TaskId"
        }
      },
      "x-go-package": "github.com/money-hub/MoneyDodo.service/model"
    },
    "Task": {
      "type": "object",
      "properties": {
        "cutoff": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Cutoff"
        },
        "id": {
          "type": "string",
          "x-go-name": "Id"
        },
        "kind": {
          "type": "string",
          "x-go-name": "Kind"
        },
        "pubdate": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Pubdate"
        },
        "publisher": {
          "type": "string",
          "x-go-name": "Publisher"
        },
        "restrain": {
          "description": "Recipient       string    `json:\"recipient\"`",
          "type": "string",
          "x-go-name": "Restrain"
        },
        "reward": {
          "description": "Enddate         time.Time `json:\"enddate\"`",
          "type": "number",
          "format": "double",
          "x-go-name": "Reward"
        },
        "state": {
          "description": "RecipientFinish bool      `json:\"recipientFinish\" xorm:\"recipientFinish\"`\nConfirmFinish   bool      `json:\"confirmFinish\" xorm:\"confirmFinish\"`",
          "type": "string",
          "x-go-name": "State"
        }
      },
      "x-go-package": "github.com/money-hub/MoneyDodo.service/model"
    },
    "User": {
      "type": "object",
      "properties": {
        "balance": {
          "type": "number",
          "format": "double",
          "x-go-name": "Balance"
        },
        "certificationStatus": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "CertificationStatus"
        },
        "certifiedPic": {
          "type": "string",
          "x-go-name": "CertifiedPic"
        },
        "creditScore": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "CreditScore"
        },
        "email": {
          "type": "string",
          "x-go-name": "Email"
        },
        "icon": {
          "type": "string",
          "x-go-name": "Icon"
        },
        "id": {
          "type": "string",
          "x-go-name": "Id"
        },
        "introduction": {
          "type": "string",
          "x-go-name": "Introduction"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "phone": {
          "type": "string",
          "x-go-name": "Phone"
        },
        "sId": {
          "type": "string",
          "x-go-name": "SId"
        }
      },
      "x-go-package": "github.com/money-hub/MoneyDodo.service/model"
    },
    "query": {
      "type": "object",
      "properties": {
        "answer": {
          "type": "string",
          "x-go-name": "Answer"
        },
        "question": {
          "type": "string",
          "x-go-name": "Question"
        }
      },
      "x-go-package": "github.com/money-hub/MoneyDodo.service/model"
    },
    "singleChoice": {
      "type": "object",
      "properties": {
        "answer": {
          "type": "string",
          "x-go-name": "Answer"
        },
        "choices": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Choices"
        },
        "question": {
          "type": "string",
          "x-go-name": "Question"
        }
      },
      "x-go-package": "github.com/money-hub/MoneyDodo.service/model"
    }
  },
  "responses": {
    "swaggAuthOfAdminResp": {
      "description": "HTTP status code 200 and token in data",
      "schema": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Token",
            "type": "string",
            "x-go-name": "Token"
          },
          "errinfo": {
            "description": "Detailed error message",
            "type": "string",
            "x-go-name": "Errinfo"
          },
          "status": {
            "description": "Boolean true/false",
            "type": "boolean",
            "x-go-name": "Status"
          }
        }
      }
    },
    "swaggAuthOfUserResp": {
      "description": "HTTP status code 200 and token in data",
      "schema": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Token",
            "type": "string",
            "x-go-name": "Token"
          },
          "errinfo": {
            "description": "Detailed error message",
            "type": "string",
            "x-go-name": "Errinfo"
          },
          "status": {
            "description": "Boolean true/false",
            "type": "boolean",
            "x-go-name": "Status"
          }
        }
      }
    },
    "swaggBadReq": {
      "description": "Error Fail",
      "schema": {
        "type": "object",
        "properties": {
          "errinfo": {
            "description": "Detailed error message",
            "type": "string",
            "x-go-name": "Errinfo"
          },
          "status": {
            "description": "HTTP Status Code 200",
            "type": "boolean",
            "x-go-name": "Status"
          }
        }
      }
    },
    "swaggNoReturnValue": {
      "description": "HTTP status code 200 and no return value",
      "schema": {
        "type": "object",
        "properties": {
          "errinfo": {
            "description": "Detailed error message",
            "type": "string",
            "x-go-name": "Errinfo"
          },
          "status": {
            "description": "HTTP Status Code 200",
            "type": "boolean",
            "x-go-name": "Status"
          }
        }
      }
    },
    "swaggTaskResp": {
      "description": "HTTP status code 200 and task model in data",
      "schema": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/definitions/Qtnr"
          },
          "errinfo": {
            "description": "Detailed error message",
            "type": "string",
            "x-go-name": "Errinfo"
          },
          "status": {
            "description": "Boolean true/false",
            "type": "boolean",
            "x-go-name": "Status"
          }
        }
      }
    },
    "swaggTasksResp": {
      "description": "HTTP status code 200 and an array of task models in data",
      "schema": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Tasks model",
            "type": "array",
            "items": {
              "$ref": "#/definitions/Task"
            },
            "x-go-name": "Data"
          },
          "errinfo": {
            "description": "Detailed error message",
            "type": "string",
            "x-go-name": "Errinfo"
          },
          "status": {
            "description": "Boolean true/false",
            "type": "boolean",
            "x-go-name": "Status"
          }
        }
      }
    },
    "swaggUserResp": {
      "description": "HTTP status code 200 and user model in data",
      "schema": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/definitions/User"
          },
          "errinfo": {
            "description": "Detailed error message",
            "type": "string",
            "x-go-name": "Errinfo"
          },
          "status": {
            "description": "Boolean true/false",
            "type": "boolean",
            "x-go-name": "Status"
          }
        }
      }
    },
    "swaggUsersResp": {
      "description": "HTTP status code 200 and an array of user models in data",
      "schema": {
        "type": "object",
        "properties": {
          "data": {
            "description": "User model",
            "type": "array",
            "items": {
              "$ref": "#/definitions/User"
            },
            "x-go-name": "Data"
          },
          "errinfo": {
            "description": "Detailed error message",
            "type": "string",
            "x-go-name": "Errinfo"
          },
          "status": {
            "description": "Boolean true/false",
            "type": "boolean",
            "x-go-name": "Status"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  }
}