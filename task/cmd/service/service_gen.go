// THIS FILE IS AUTO GENERATED BY GK-CLI DO NOT EDIT!!
package service

import (
	endpoint1 "github.com/go-kit/kit/endpoint"
	log "github.com/go-kit/kit/log"
	prometheus "github.com/go-kit/kit/metrics/prometheus"
	opentracing "github.com/go-kit/kit/tracing/opentracing"
	http "github.com/go-kit/kit/transport/http"
	endpoint "github.com/money-hub/MoneyDodo.service/task/pkg/endpoint"
	service "github.com/money-hub/MoneyDodo.service/task/pkg/service"
	group "github.com/oklog/oklog/pkg/group"
	opentracinggo "github.com/opentracing/opentracing-go"
)

func createService(endpoints endpoint.Endpoints) (g *group.Group) {
	g = &group.Group{}
	initHttpHandler(endpoints, g)
	return g
}
func defaultHttpOptions(logger log.Logger, tracer opentracinggo.Tracer) map[string][]http.ServerOption {
	options := map[string][]http.ServerOption{
		"AdminGetAllTasksByUserID":        {http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "AdminGetAllTasksByUserID", logger))},
		"AdminGetTasksClosedByUserID":     {http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "AdminGetTasksClosedByUserID", logger))},
		"AdminGetTasksReleasedByUserID":   {http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "AdminGetTasksReleasedByUserID", logger))},
		"AdminGetTasksUnreleasedByUserID": {http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "AdminGetTasksUnreleasedByUserID", logger))},
		"UserGetHisClosedTasks":           {http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "UserGetHisClosedTasks", logger))},
		"UserGetHisReleasedTasks":         {http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "UserGetHisReleasedTasks", logger))},
		"UserGetHisUnreleasedTasks":       {http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "UserGetHisUnreleasedTasks", logger))},
		"UserGetTasksByID":                {http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "UserGetTasksByID", logger))},
	}
	return options
}
func addDefaultEndpointMiddleware(logger log.Logger, duration *prometheus.Summary, mw map[string][]endpoint1.Middleware) {
	mw["UserGetHisReleasedTasks"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "UserGetHisReleasedTasks")), endpoint.InstrumentingMiddleware(duration.With("method", "UserGetHisReleasedTasks"))}
	mw["UserGetTasksByID"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "UserGetTasksByID")), endpoint.InstrumentingMiddleware(duration.With("method", "UserGetTasksByID"))}
	mw["UserGetHisUnreleasedTasks"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "UserGetHisUnreleasedTasks")), endpoint.InstrumentingMiddleware(duration.With("method", "UserGetHisUnreleasedTasks"))}
	mw["UserGetHisClosedTasks"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "UserGetHisClosedTasks")), endpoint.InstrumentingMiddleware(duration.With("method", "UserGetHisClosedTasks"))}
	mw["AdminGetAllTasksByUserID"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "AdminGetAllTasksByUserID")), endpoint.InstrumentingMiddleware(duration.With("method", "AdminGetAllTasksByUserID"))}
	mw["AdminGetTasksReleasedByUserID"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "AdminGetTasksReleasedByUserID")), endpoint.InstrumentingMiddleware(duration.With("method", "AdminGetTasksReleasedByUserID"))}
	mw["AdminGetTasksUnreleasedByUserID"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "AdminGetTasksUnreleasedByUserID")), endpoint.InstrumentingMiddleware(duration.With("method", "AdminGetTasksUnreleasedByUserID"))}
	mw["AdminGetTasksClosedByUserID"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "AdminGetTasksClosedByUserID")), endpoint.InstrumentingMiddleware(duration.With("method", "AdminGetTasksClosedByUserID"))}
}
func addDefaultServiceMiddleware(logger log.Logger, mw []service.Middleware) []service.Middleware {
	return append(mw, service.LoggingMiddleware(logger))
}
func addEndpointMiddlewareToAllMethods(mw map[string][]endpoint1.Middleware, m endpoint1.Middleware) {
	methods := []string{"UserGetHisReleasedTasks", "UserGetTasksByID", "UserGetHisUnreleasedTasks", "UserGetHisClosedTasks", "AdminGetAllTasksByUserID", "AdminGetTasksReleasedByUserID", "AdminGetTasksUnreleasedByUserID", "AdminGetTasksClosedByUserID"}
	for _, v := range methods {
		mw[v] = append(mw[v], m)
	}
}
